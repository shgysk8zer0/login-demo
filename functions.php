<?php
namespace Functions;
require_once __DIR__ . DIRECTORY_SEPARATOR . 'consts.php';
use const \Constants\{KEY, ALGO, LIFETIME, USER, IS_WP, WP_INIT};
use \DateTime;
use \Throwable;
use \Error;

/**
 * Gets desired user for cross-site login
 * @param Void
 * @return String User
 */
function get_user(): String
{
  try {
    if (wp_init()) {
      $user = wp_get_current_user();
      return $user->user_login;
    } else {
      return USER;
    }
  } catch(Throwable $e) {
    return USER;
  }
}

/**
 * Load WP if available, returning true/false
 * @return Bool Whether or not WP script was found & loaded
 */
function wp_init(): Bool
{
  if (IS_WP) {
    try {
      require_once WP_INIT;
      return true;
    } catch (Throwable $e) {
      return false;
    }
  } else {
    return false;
  }
}

/**
 * Login user without password
 * @param  String $user Username
 * @return Bool         If login was successful
 */
function login(String $user): Bool
{
  try {
    if (wp_init()) {
      $user = get_user_by('login', $user);
      if (! is_wp_error($user)) {
        wp_clear_auth_cookie();
        wp_set_current_user($user->ID);
        wp_set_auth_cookie($user->ID);
        return true;
      } else {
        return false;
      }
    } else {
      return true;
    }
  } catch (Throwable $e) {
    return false;
  }
}

/**
 * Redirect to a given $url
 * @param  String  $url       The URL to redirect to
 * @param  Bool    $permenant Whether or not it should be a permenant redirect
 * @return Void
 */
function redirect(String $url = '/', Bool $permanent = false): Void
{
  header(sprintf('Location: %s', $url), true, $permanent ? 301 : 302);
  exit();
}

/**
 * Checks if a list of $keys exist in $array
 * @param  Array  $array The array to check
 * @param  String $keys  The keys to check
 * @return Bool          Whether or not they exist
 * @example array_keys_exist($_GET, 'user', 'password')
 */
function array_keys_exist(Array $array, String ...$keys): Bool
{
  $exist = true;
  foreach($keys as $key) {
    if (! array_key_exists($key, $array)) {
      $exist = false;
      break;
    }
  }
  return $exist;
}

/**
 * Generate a query string for cross-site secure login
 * @param  String  $user        User
 * @param  String  $key         HMAC key
 * @param  String  $algo        Hashing algorithm
 * @return String               Generated query string, including the "?"
 */
function generate(
  String   $user,
  String   $key  = KEY,
  String   $algo = ALGO
): String
{
  $datetime = new DateTime();
  $data = [
    'user'     => $user,
    'datetime' => $datetime->format(DateTime::W3C),
  ];
  $data['hmac'] = hash_hmac($algo, json_encode($data), $key);
  return '?' . http_build_query($data);
}

/**
 * Verifies parsed data generated by `generate`
 * @param  String   $user        User
 * @param  DateTime $datetime    Date request generated
 * @param  String   $hmac        Given hash to check against
 * @param  String   $key         HMAC key
 * @param  String   $algo        Hashing algorithm
 * @return Bool                  If data matches HMAC and it is not expired
 */
function verify(
  String   $user,
  DateTime $datetime,
  String   $hmac,
  String   $key      = KEY,
  String   $algo     = ALGO
): Bool
{
  $valid = false;
  $expected = hash_hmac($algo, json_encode([
    'user'     => $user,
    'datetime' => $datetime->format(DateTime::W3C),
  ]), $key);

  if (hash_equals($hmac, $expected)) {
    $expires = $datetime->modify(LIFETIME);
    $now = new DateTime();
    if ($expires < $now) {
      $valid = false;
    } else {
      $valid = true;
    }
  } else {
    $valid = false;
  }
  return $valid;
}
